import ProductCard from "./ProductCard";

interface Product {
  id: string;
  name: string;
  price: number;
  image: string;
  description: string;
  category: string;
  isPopular?: boolean;
}

const products: Product[] = [
  {
    id: "1",
    name: "–ë–∏–≥ –•–∏—Ç",
    price: 259,
    image: "https://images.unsplash.com/photo-1568901346375-23c9450c58cd?w=500",
    description: "–°–æ—á–Ω–∞—è –∫–æ—Ç–ª–µ—Ç–∞ –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã, —Å–≤–µ–∂–∏–µ –æ–≤–æ—â–∏, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–æ—É—Å",
    category: "burgers",
    isPopular: true,
  },
  {
    id: "2",
    name: "–ß–∏–∫–µ–Ω –ë—É—Ä–≥–µ—Ä",
    price: 199,
    image: "https://images.unsplash.com/photo-1606755962773-d324e2daefd4?w=500",
    description: "–•—Ä—É—Å—Ç—è—â–∞—è –∫—É—Ä–∏–Ω–∞—è –∫–æ—Ç–ª–µ—Ç–∞, —Å–∞–ª–∞—Ç, —Ç–æ–º–∞—Ç—ã, –º–∞–π–æ–Ω–µ–∑",
    category: "burgers",
  },
  {
    id: "3",
    name: "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏",
    price: 89,
    image: "https://images.unsplash.com/photo-1576107232684-1279f390859f?w=500",
    description: "–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏ —Å –º–æ—Ä—Å–∫–æ–π —Å–æ–ª—å—é",
    category: "sides",
    isPopular: true,
  },
  {
    id: "4",
    name: "–ö–æ–∫–∞-–ö–æ–ª–∞",
    price: 69,
    image: "https://images.unsplash.com/photo-1629203851122-3726ecdf080e?w=500",
    description: "–û—Å–≤–µ–∂–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ 0.5–ª",
    category: "drinks",
  },
  {
    id: "5",
    name: "–ù–∞–≥–≥–µ—Ç—Å—ã",
    price: 159,
    image: "https://images.unsplash.com/photo-1562967914-608f82629710?w=500",
    description: "–•—Ä—É—Å—Ç—è—â–∏–µ –∫—É—Ä–∏–Ω—ã–µ –Ω–∞–≥–≥–µ—Ç—Å—ã 6 —à—Ç —Å —Å–æ—É—Å–æ–º",
    category: "chicken",
  },
  {
    id: "6",
    name: "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ",
    price: 45,
    image: "https://images.unsplash.com/photo-1563805042-7684c019e1cb?w=500",
    description: "–í–∞–Ω–∏–ª—å–Ω–æ–µ –º–æ—Ä–æ–∂–µ–Ω–æ–µ –≤ —Å—Ç–∞–∫–∞–Ω—á–∏–∫–µ",
    category: "desserts",
  },
];

interface ProductGridProps {
  selectedCategory: string;
  searchQuery: string;
  onAddToCart: (product: any) => void;
}

const ProductGrid = ({
  selectedCategory,
  searchQuery,
  onAddToCart,
}: ProductGridProps) => {
  const filteredProducts = products.filter((product) => {
    const matchesCategory =
      selectedCategory === "all" || product.category === selectedCategory;
    const matchesSearch =
      product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      product.description.toLowerCase().includes(searchQuery.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  const categoryName = {
    burgers: "–ë—É—Ä–≥–µ—Ä—ã",
    chicken: "–ö—É—Ä–∏—Ü–∞",
    sides: "–ì–∞—Ä–Ω–∏—Ä—ã",
    drinks: "–ù–∞–ø–∏—Ç–∫–∏",
    desserts: "–î–µ—Å–µ—Ä—Ç—ã",
    breakfast: "–ó–∞–≤—Ç—Ä–∞–∫–∏",
    all: "–í—Å–µ —Ç–æ–≤–∞—Ä—ã",
  }[selectedCategory];

  return (
    <div className="flex-1 p-6 overflow-y-auto">
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-slate-800">
          {searchQuery ? `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${searchQuery}"` : categoryName}
        </h2>
        <p className="text-slate-600 mt-1">
          {filteredProducts.length}{" "}
          {filteredProducts.length === 1 ? "—Ç–æ–≤–∞—Ä" : "—Ç–æ–≤–∞—Ä–æ–≤"}
        </p>
      </div>

      <div className="grid grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-4">
        {filteredProducts.map((product) => (
          <ProductCard
            key={product.id}
            product={product}
            onAddToCart={onAddToCart}
          />
        ))}
      </div>

      {filteredProducts.length === 0 && (
        <div className="text-center py-12">
          <div className="text-6xl mb-4">üîç</div>
          <h3 className="text-xl font-semibold text-slate-600 mb-2">
            –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
          </h3>
          <p className="text-slate-500">
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
          </p>
        </div>
      )}
    </div>
  );
};

export default ProductGrid;
